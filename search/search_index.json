{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Serapeum","text":"<p>Welcome to the Serapeum GitHub organization. </p>"},{"location":"contributing/","title":"Contributing","text":"<p>contribution</p>"},{"location":"development-tools/branch-naming-convention/","title":"Git Branch Naming Convention (Based on Conventional Commits)","text":"<p>This document describes the branch naming convention used in this project, inspired by the Conventional Commits specification. Following a consistent naming pattern improves clarity and makes collaboration smoother.</p>"},{"location":"development-tools/branch-naming-convention/#branch-naming-structure","title":"Branch Naming Structure","text":""},{"location":"development-tools/branch-naming-convention/#recommended-pattern","title":"Recommended Pattern","text":"<p>Use the following structure for naming branches:</p> <pre><code>&lt;type&gt;/&lt;short-description&gt;\n</code></pre> <p>Or, if linking to an issue or ticket:</p> <pre><code>&lt;type&gt;/&lt;issue-id&gt;-&lt;short-description&gt;\n</code></pre>"},{"location":"development-tools/branch-naming-convention/#examples","title":"Examples","text":"<ul> <li><code>feat/user-login</code></li> <li><code>fix/typo-in-readme</code></li> <li><code>chore/update-dependencies</code></li> <li><code>docs/api-endpoint-docs</code></li> <li><code>refactor/auth-handler</code></li> <li><code>test/login-component</code></li> <li><code>feat/123-add-export-button</code></li> </ul>"},{"location":"development-tools/branch-naming-convention/#allowed-type-values","title":"Allowed <code>&lt;type&gt;</code> Values","text":"Type Description <code>feat</code> A new feature <code>fix</code> A bug fix <code>docs</code> Documentation-only changes <code>style</code> Code style changes (no logic impact) <code>refactor</code> Code refactoring (no behavior change) <code>perf</code> Performance improvement <code>test</code> Adding or updating tests <code>chore</code> Maintenance tasks (build, deps, etc)"},{"location":"development-tools/branch-naming-convention/#tips","title":"Tips","text":"<ul> <li>Use kebab-case: <code>my-new-feature</code>, not <code>my_new_feature</code> or <code>MyNewFeature</code>.</li> <li>Keep it short but descriptive.</li> <li>Include the issue or ticket number when possible for traceability.</li> <li>Avoid long or overly detailed branch names.</li> </ul>"},{"location":"development-tools/branch-naming-convention/#pull-request-naming-convention","title":"Pull Request Naming Convention","text":"<p>Pull requests should follow the following naming convention.</p> <p><pre><code>&lt;type&gt;: &lt;short, imperative summary&gt;\n</code></pre> This mimics a conventional commit, which makes changelogs, automation, and code reviews more consistent.</p>"},{"location":"development-tools/branch-naming-convention/#examples_1","title":"Examples","text":"<ul> <li><code>feat: add user login functionality</code></li> <li><code>fix: correct typo in README</code></li> <li><code>docs: add API usage examples</code></li> <li><code>refactor: clean up auth handler logic</code></li> <li><code>test: add unit tests for login form</code></li> <li><code>chore: update project dependencies</code></li> </ul> <p>If your PR is linked to an issue or ticket, you can prefix or suffix with the ID: - <code>feat: add export button (closes #123)</code> - <code>fix: handle null values in parser [JIRA-456]</code></p>"},{"location":"development-tools/branch-naming-convention/#tips_1","title":"Tips","text":"<ul> <li>Use an imperative voice, just like in commit messages: \u201cadd\u201d instead of \u201cadded\u201d.</li> <li>Keep it concise and focused on the goal of the PR.</li> <li>Use the same  keywords as in Conventional Commits. <li>Link the PR to the related issue/ticket either in the title or body (or both!).</li>"},{"location":"development-tools/branch-naming-convention/#reference","title":"Reference","text":"<ul> <li>Conventional Commits</li> </ul> <p>By following this convention, we ensure that our Git history is more readable and maintainable. Happy branching! \ud83c\udf31</p>"},{"location":"development-tools/pre-commit/","title":"pre-commit hooks","text":"<pre><code>fail_fast: true\nrepos:\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v5.0.0\n    hooks:\n      - id: check-toml\n        name: \"[py -  check] check toml\"\n      - id: end-of-file-fixer\n        name: \"[py -  check] validate yaml\"\n      - id: no-commit-to-branch\n        name: \"[git -  check] no commit to branch\"\n        args: [ --branch=main ]\n      - id: trailing-whitespace\n        name: \"[file - format] trim trailing whitespace\"\n        args: [ --markdown-linebreak-ext=md ]\n      - id: check-added-large-files\n        name: \"[file -  check] large file\"\n        args: [ --maxkb=2000 ]\n      - id: check-docstring-first\n        name: \"[py   -  check] docstring first\"\n        files: /examples\n        types : [file, python ]\n      - id: check-json\n        name: \"[json -  check] validate json\"\n      - id: check-merge-conflict\n        name: \"[git  -  check] merge conflict\"\n      - id: debug-statements\n        name: \"[py   -  check] debug statements\"\n      - id: detect-private-key\n        name: \"[cred -  check] private keys\"\n      - id: fix-encoding-pragma\n        name: \"[file - format] coding pragma\"\n        args: [ --remove ]\n      - id: mixed-line-ending\n        name: \"[file - format] mixed line ending\"\n        args: [ --fix=auto ]\n      - id: pretty-format-json\n        name: \"[json - format] pretty json\"\n        args: [ --autofix,\n                --indent=4,\n                --no-sort-keys ]\n      - id: requirements-txt-fixer\n        name: \"[reqs - format] fix requirements.txt\"\n      - id: check-yaml\n        name: \"[yaml -  check] validate yaml\"\n  - repo: https://github.com/pycqa/flake8\n    rev: 7.1.1\n    hooks:\n      - id: flake8\n        additional_dependencies: [Flake8-pyproject]\n        name: \"[py   - check] flake8\"\n        exclude: ^(examples/|tests/)\n#   - repo: https://github.com/pycqa/docformatter\n#     rev: v1.4\n#     hooks:\n#      - id: docformatter\n#        name: \"[py   - format] docformatter\"\n#        description: 'Formats docstrings to follow PEP 257.'\n#        entry: docformatter\n#        args: [-i]\n#        language: python\n#        types: [python]\n#   - repo: https://github.com/pycqa/pydocstyle\n#     rev: 6.3.0\n#     hooks:\n#       - id: pydocstyle\n#         name: \"[py   - check] pydocstyle\"\n#         files: ^hydrolib/.*\\.py$\n  - repo: https://github.com/pycqa/isort\n    rev: 5.13.2\n    hooks:\n      - id: isort\n        name: \"[py   - format] isort\"\n  - repo: https://github.com/psf/black\n    rev: 24.10.0\n    hooks:\n      - id: black\n  - repo: https://github.com/lovesegfault/beautysh\n    rev: v6.2.1\n    hooks:\n      - id: beautysh\n        name: \"[bash - format] beautysh\"\n\n  - repo: https://github.com/detailyang/pre-commit-shell\n    rev: 1.0.5\n    hooks:\n      - id: shell-lint\n        name: \"[bash -   lint] shell-lint\"\n\n  - repo: https://github.com/rlindsgaard/pre-commit-commit-msg-hooks\n    rev: 0.1.0\n    hooks:\n      - id: check-description-max-length\n        name: \"[bash -   format] check-description-max-length\"\n      - id: check-second-line-empty\n        name: \"[bash -   format] check-second-line-empty\"\n      - id: check-summary-capitalized\n        name: \"[bash -   format] check-summary-capitalized\"\n      - id: check-summary-imperative\n        name: \"[bash -   format] check-summary-imperative\"\n      - id: check-summary-max-length\n        name: \"[bash -   format] check-summary-max-length\"\n      - id: check-summary-punctuation\n        name: \"[bash -   format] check-summary-punctuation\"\n\n  - repo: https://github.com/PyCQA/bandit\n    rev: 1.7.5\n    hooks:\n      - id: bandit\n        args: [\"--skip=B101\"]\n\n  - repo: https://github.com/gitleaks/gitleaks\n    rev: v8.17.0\n    hooks:\n      - id: gitleaks\n\n  - repo: https://github.com/Yelp/detect-secrets\n    rev: v1.4.0\n    hooks:\n      - id: detect-secrets\n  - repo: https://github.com/bridgecrewio/checkov\n    rev: 2.1.63\n    hooks:\n      - id: checkov\n\n  - repo: https://github.com/trufflesecurity/truffleHog\n    rev: v3.88.2\n    hooks:\n      - id: trufflehog\n\n  - repo: local\n    hooks:\n      - id: safety\n        name: Safety Check\n        entry: safety check --full-report\n        language: system\n        types: [python]\n        pass_filenames: false\n\n  - repo: local\n    hooks:\n      - id: pytest-check\n        name: pytest-check\n        entry: pytest -vvv --cov=hydrolib --cov-report term-missing\n        language: system\n        pass_filenames: false\n        always_run: true\n\n  - repo: local\n    hooks:\n      - id: examples-notebook-check\n        name: nbval\n        entry: pytest --nbval\n        language: system\n        files: \\.ipynb$\n\n  - repo: local\n    hooks:\n      - id: doctest\n        name: doctest\n        entry: pytest --doctest-modules\n        language: system\n        files: ^hydrolib/.*\\.py$\n</code></pre>"},{"location":"medium-articles/data-science/","title":"Data Science","text":"<ul> <li> <p>Getting Started with Conda environment [Part-1]</p> </li> <li> <p>One step further to improve the Conda environment \u2014 Numpy implementation[Part-2]</p> </li> <li> <p>Getting Started with JupyterLab</p> </li> </ul>"},{"location":"medium-articles/gis/","title":"GIS","text":"<ul> <li> <p>Why should you install gdal using Pip, not conda? [Part 1]</p> </li> <li> <p>GDAL Installation for windows [Part 2]</p> </li> <li> <p>GDAL Installation for Linux [Part 3]</p> </li> <li> <p>QGIS Plugins [Part 4]</p> </li> <li> <p>0\u2013360 longitude to -180\u2013180 longitude convention</p> </li> <li> <p>Technical issues in most of the popular GIS Python packages</p> </li> </ul>"},{"location":"medium-articles/hydrology-and-hydraulics/","title":"Hydrology and Hydraulics","text":"<p>Hydrology and Hydraulics</p> <ul> <li> <p>Large-scale flood risk modelling</p> </li> <li> <p>HBV lumped conceptual hydrological model</p> </li> <li> <p>Four decisions you need to take to build a hydrological model</p> </li> <li> <p>Numerical models from black-box to physically based models</p> </li> </ul>"},{"location":"medium-articles/software-development/","title":"Software Development","text":""},{"location":"medium-articles/software-development/#software-development-in-linux","title":"Software Development in Linux","text":"<ul> <li> <p>Getting Started with Windows Sub System for Linux (WSL)</p> </li> <li> <p>WSL and GUI</p> </li> <li> <p>Linux Package management system</p> </li> <li> <p>Install MiniConda in WSL</p> </li> <li> <p>Stop debugging like we are in the 1950</p> </li> </ul>"},{"location":"medium-articles/software-development/#general","title":"General","text":"<ul> <li>Why doesn\u2019t FORTRAN finally die for good?</li> </ul>"},{"location":"python-packages/overview/","title":"Serapeum","text":""},{"location":"python-packages/overview/#packages-dependency","title":"Packages dependency","text":""},{"location":"python-packages/overview/#top-level-functionality","title":"Top Level Functionality","text":""},{"location":"python-packages/overview/#star-history","title":"Star History","text":"<p>Welcome to the Serapeum GitHub organization. Below is an overview of our repositories, categorized by their primary focus.</p>"},{"location":"python-packages/overview/#hydrological-modeling","title":"Hydrological Modeling","text":"<ul> <li> <p>Hapi   A Python library for building conceptual distributed models using the HBV96 lumped model and Muskingum routing method.</p> </li> <li> <p>Digital Rivers   Tools for modeling and simulating river systems and their behaviors.</p> </li> <li> <p>Serapis   Tools to streamline data workflows and ensure data consistency across projects.</p> </li> </ul>"},{"location":"python-packages/overview/#geospatial-analysis","title":"Geospatial Analysis","text":"<ul> <li> <p>Pyramids   A geospatial data package for processing spatial data efficiently.</p> </li> <li> <p>Earth2Observe   Facilitates access to and processing of Earth observation datasets.</p> </li> <li> <p>Digital Earth   Enables the creation of maps, animations, and visual representations of spatial data.</p> </li> <li> <p>Geostatista   Tools for geostatistical analysis, including variogram modeling and spatial interpolation.</p> </li> </ul>"},{"location":"python-packages/overview/#statistical-analysis","title":"Statistical Analysis","text":"<ul> <li>Statista   Tools for statistical analysis of extreme events and distributions.</li> </ul>"},{"location":"python-packages/overview/#visualization","title":"Visualization","text":"<ul> <li>Cleopatra   Enhanced plotting capabilities for creating sophisticated visualizations in Python.</li> </ul>"},{"location":"python-packages/overview/#optimization-and-algorithms","title":"Optimization and Algorithms","text":"<ul> <li>Oasis   An optimization algorithm implemented in Python, utilizing harmony search techniques.</li> </ul>"},{"location":"python-packages/overview/#cloud-computing","title":"Cloud Computing","text":"<ul> <li>Unicloud   Tools and frameworks for deploying and managing cloud resources.</li> </ul>"},{"location":"python-packages/overview/#utility-libraries","title":"Utility Libraries","text":"<ul> <li>Serapeum Utils   Utility functions and scripts supporting various tasks across different repositories.</li> </ul>"},{"location":"python-packages/overview/#machine-learning","title":"Machine Learning","text":"<ul> <li>ML   Algorithms, models, and utilities for building and deploying machine learning solutions.</li> </ul>"},{"location":"python-packages/overview/#high-performance-computing","title":"High-Performance Computing","text":"<ul> <li>HPC   Tools and frameworks to leverage parallel computing resources for complex computations.</li> </ul>"},{"location":"python-packages/cloud/unicloud/","title":"Unicloud","text":""},{"location":"python-packages/cloud/unicloud/#current-release-info","title":"Current release info","text":"Name Downloads Version Platforms"},{"location":"python-packages/cloud/unicloud/#conda-forge-build-status","title":"Conda-forge build status","text":"All platforms: <ul> <li>feedstock link: unicloud</li> </ul>"},{"location":"python-packages/cloud/unicloud/#unicloud-cloud-utility-package","title":"unicloud - Cloud utility package","text":"<ul> <li>Unicloud provides robust and intuitive tools designed to simplify interactions with AWS S3 and Google Cloud Storage (GCS), offering developers a streamlined API for managing cloud storage operations.</li> <li>Whether you're uploading data backups, retrieving files for analysis, or managing cloud storage resources programmatically, our package ensures a seamless and efficient experience. Built with flexibility and ease of use in mind, it supports a wide range of operations, including file uploads, downloads, and storage management tasks, all while maintaining high security and reliability standards.</li> <li>Ideal for developers working in cloud-native environments, data scientists requiring reliable data storage solutions, or businesses looking to automate their cloud storage workflows, this package aims to enhance productivity and facilitate the seamless integration of cloud storage capabilities into Python applications.</li> </ul>"},{"location":"python-packages/cloud/unicloud/#documentation","title":"Documentation","text":"<ul> <li>Full documentation is available at Read the Docs</li> </ul>"},{"location":"python-packages/cloud/unicloud/#installing-unicloud","title":"Installing unicloud","text":"<p>Installing <code>unicloud</code> from the <code>conda-forge</code> channel can be achieved by:</p> <pre><code>conda install -c conda-forge unicloud=0.4.0\n</code></pre> <p>It is possible to list all the versions of <code>unicloud</code> available on your platform with:</p> <pre><code>conda search unicloud --channel conda-forge\n</code></pre>"},{"location":"python-packages/cloud/unicloud/#install-from-github","title":"Install from GitHub","text":"<p>to install the last development to time, you can install the library from GitHub</p> <pre><code>pip install git+https://github.com/Serapieum-of-alex/unicloud\n</code></pre>"},{"location":"python-packages/cloud/unicloud/#pip","title":"pip","text":"<p>to install the last release, you can easily use pip</p> <pre><code>pip install unicloud==0.4.0\n</code></pre> <p>to install only the Google Cloud storage part, you can use the following command :</p> <pre><code>pip install unicloud[gcs]==0.4.0\n</code></pre> <p>to install only the AWS S3 part, you can use the following command :</p> <pre><code>pip install unicloud[s3]==0.4.0\n</code></pre> <p>to indtall all the dependencies, you can use the following command :</p> <pre><code>pip install unicloud[all]==0.4.0\n</code></pre>"},{"location":"python-packages/cloud/unicloud/#quick-start","title":"Quick start","text":"<pre><code>  &gt;&gt;&gt; import unicloud\n</code></pre> <p>other code samples</p>"},{"location":"python-packages/data-visualization/cleopatra/","title":"Cleopatra","text":""},{"location":"python-packages/data-visualization/cleopatra/#current-release-info","title":"Current release info","text":"<p>Repository: GitHub conda-forge feedstock:  Documentation: GitHub Pages</p> Name Downloads Version Platforms"},{"location":"python-packages/data-visualization/cleopatra/#cleopatra-matplotlib-utility-package","title":"cleopatra - matplotlib utility package","text":"<p>cleopatra is a Python package providing fast and flexible way to build visualize data using matplotlib. it provides functionalities to handle 3D arrays and perform various operations on them, such as plotting, animating, and displaying the array. it also provides functionalities for creating statistical plots,</p>"},{"location":"python-packages/data-visualization/cleopatra/#main-features","title":"Main Features","text":"<p>The <code>Array</code> class has the following functionalities: - Initialize an array object with the provided parameters. - Plot the array with optional parameters to customize the appearance and display cell values. - Animate the array over time with optional parameters to customize the animation speed and display points. - Display the array with optional parameters to customize the appearance and display point IDs.</p> <p>The <code>statistical_glyph</code> module provides a class for creating statistical plots, specifically histograms. The class, <code>StatisticalGlyph</code>, is designed to handle both 1D (single-dimensional) and 2D (multi-dimensional) data.</p>"},{"location":"python-packages/data-visualization/cleopatra/#installing-cleopatra","title":"Installing cleopatra","text":"<p>Installing <code>cleopatra</code> from the <code>conda-forge</code> channel can be achieved by:</p> <pre><code>conda install -c conda-forge cleopatra\n</code></pre> <p>It is possible to list all the versions of <code>cleopatra</code> available on your platform with:</p> <pre><code>conda search cleopatra --channel conda-forge\n</code></pre>"},{"location":"python-packages/data-visualization/cleopatra/#install-from-github","title":"Install from GitHub","text":"<p>to install the last development to time, you can install the library from GitHub <pre><code>pip install git+https://github.com/Serapieum-of-alex/cleopatra\n</code></pre></p>"},{"location":"python-packages/data-visualization/cleopatra/#pip","title":"pip","text":"<p>to install the last release, you can easily use pip <pre><code>pip install cleopatra==0.6.0\n</code></pre></p>"},{"location":"python-packages/data-visualization/cleopatra/#quick-start","title":"Quick start","text":"<pre><code>  &gt;&gt;&gt; import cleopatra\n</code></pre> <p>other code samples</p>"},{"location":"python-packages/data-visualization/digital-earth/","title":"GIS data visualization","text":""},{"location":"python-packages/data-visualization/digital-earth/#current-release-info","title":"Current release info","text":"Name Downloads Version Platforms"},{"location":"python-packages/data-visualization/digital-earth/#digitalearth-remote-sensing-package","title":"digitalearth - Remote Sensing package","text":"<p>digitalearth is a Remote Sensing package</p> <p>digitalearth</p>"},{"location":"python-packages/data-visualization/digital-earth/#main-features","title":"Main Features","text":"<ul> <li>plot static maps</li> </ul>"},{"location":"python-packages/data-visualization/digital-earth/#future-work","title":"Future work","text":"<ul> <li>dynamic/interactive maps</li> </ul>"},{"location":"python-packages/data-visualization/digital-earth/#installing-digitalearth","title":"Installing digitalearth","text":"<p>Installing <code>digitalearth</code> from the <code>conda-forge</code> channel can be achieved by:</p> <pre><code>conda install -c conda-forge digitalearth\n</code></pre> <p>It is possible to list all of the versions of <code>digitalearth</code> available on your platform with:</p> <pre><code>conda search digitalearth --channel conda-forge\n</code></pre>"},{"location":"python-packages/data-visualization/digital-earth/#install-from-github","title":"Install from Github","text":"<p>to install the last development to time you can install the library from github <pre><code>pip install git+https://github.com/MAfarrag/digitalearth\n</code></pre></p>"},{"location":"python-packages/data-visualization/digital-earth/#pip","title":"pip","text":"<p>to install the last release you can easly use pip <pre><code>pip install digitalearth==0.1.11\n</code></pre></p>"},{"location":"python-packages/data-visualization/digital-earth/#quick-start","title":"Quick start","text":"<p><pre><code>from digitalearth.map import Map\nsrc = gdal.Open(\"examples/data/acc4000.tif\")\nfig, ax = Map.plot(src, title=\"Flow Accumulation\", cbar_label=\"Flow Accumulation\")  \n</code></pre> <pre><code>import pandas as pd\nfrom digitalearth.map import Map\npoints = pd.read_csv(\"examples/data/points.csv\")\npoint_color = \"blue\"\npoint_size = 100\nid_color = \"yellow\"\nid_size = 20\n\ndisplay_cellvalue = True\nnum_size = 8\nbackground_color_threshold = None\nticks_spacing = 500\n\nfig, ax = Map.plot(\n            src,\n            point_color=point_color,\n            point_size=point_size,\n            pid_color=id_color,\n            pid_size=id_size,\n            points=points,\n            display_cellvalue=display_cellvalue,\n            num_size=num_size,\n            background_color_threshold=background_color_threshold,\n            ticks_spacing=ticks_spacing,\n            title=\"Flow Accumulation\",\n            cbar_label=\"Flow Accumulation\"\n        )\n</code></pre> other code samples</p>"},{"location":"python-packages/gis/digital-rivers/","title":"Digital Rivers","text":""},{"location":"python-packages/gis/digital-rivers/#current-release-info","title":"Current release info","text":"Name Downloads Version Platforms"},{"location":"python-packages/gis/digital-rivers/#digitalrivers-gis-utility-package","title":"digitalrivers - GIS utility package","text":"<p>digitalrivers is a GIS utility package using gdal, ....</p>"},{"location":"python-packages/gis/digital-rivers/#future-work","title":"Future work","text":"<ul> <li>Developing a DEM processing module for generating the river network at different DEM spatial resolutions.</li> </ul>"},{"location":"python-packages/gis/digital-rivers/#installing-digitalrivers","title":"Installing digitalrivers","text":"<p>Installing <code>digitalrivers</code> from the <code>conda-forge</code> channel can be achieved by:</p> <pre><code>conda install -c conda-forge digitalrivers=0.1.0\n</code></pre> <p>It is possible to list all the versions of <code>digitalrivers</code> available on your platform with:</p> <pre><code>conda search digitalrivers --channel conda-forge\n</code></pre>"},{"location":"python-packages/gis/digital-rivers/#install-from-github","title":"Install from GitHub","text":"<p>to install the last development to time, you can install the library from GitHub</p> <pre><code>pip install git+https://github.com/Serapieum-of-alex/digitalrivers\n</code></pre>"},{"location":"python-packages/gis/digital-rivers/#pip","title":"pip","text":"<p>to install the last release, you can easily use pip</p> <pre><code>pip install digitalrivers==0.1.0\n</code></pre>"},{"location":"python-packages/gis/digital-rivers/#quick-start","title":"Quick start","text":"<pre><code>  &gt;&gt;&gt; import digitalrivers\n</code></pre> <p>other code samples</p>"},{"location":"python-packages/gis/pyramids/","title":"Pyramids","text":""},{"location":"python-packages/gis/pyramids/#current-release-info","title":"Current release info","text":"Name Downloads Version Platforms"},{"location":"python-packages/gis/pyramids/#pyramids-gis-utility-package","title":"pyramids - GIS utility package","text":"<p>pyramids is a GIS utility package using gdal, ....</p> <p>pyramids</p> <p></p>"},{"location":"python-packages/gis/pyramids/#main-features","title":"Main Features","text":"<ul> <li>GIS modules to enable the modeler to fully prepare the meteorological inputs and do all the preprocessing   needed to build the model (align rasters with the DEM), in addition to various methods to manipulate and   convert different forms of distributed data (rasters, NetCDF, shapefiles)</li> </ul>"},{"location":"python-packages/gis/pyramids/#future-work","title":"Future work","text":"<ul> <li>Developing a DEM processing module for generating the river network at different DEM spatial resolutions.</li> </ul>"},{"location":"python-packages/gis/pyramids/#installing-pyramids","title":"Installing pyramids","text":"<p>Installing <code>pyramids</code> from the <code>conda-forge</code> channel can be achieved by:</p> <pre><code>conda install -c conda-forge pyramids=0.7.1\n</code></pre> <p>It is possible to list all the versions of <code>pyramids</code> available on your platform with:</p> <pre><code>conda search pyramids --channel conda-forge\n</code></pre>"},{"location":"python-packages/gis/pyramids/#install-from-github","title":"Install from GitHub","text":"<p>to install the last development to time, you can install the library from GitHub</p> <pre><code>pip install git+https://github.com/Serapieum-of-alex/pyramids\n</code></pre>"},{"location":"python-packages/gis/pyramids/#pip","title":"pip","text":"<p>to install the last release, you can easily use pip</p> <pre><code>pip install pyramids-gis==0.7.1\n</code></pre>"},{"location":"python-packages/gis/pyramids/#quick-start","title":"Quick start","text":"<pre><code>  &gt;&gt;&gt; import pyramids\n</code></pre>"},{"location":"python-packages/hydrological-modeling/hapi/","title":"Hydrological model","text":""},{"location":"python-packages/hydrological-modeling/hapi/#current-build-status","title":"Current build status","text":"All platforms:"},{"location":"python-packages/hydrological-modeling/hapi/#current-release-info","title":"Current release info","text":"Name Downloads Version Platforms"},{"location":"python-packages/hydrological-modeling/hapi/#hapi-hydrological-library-for-python","title":"Hapi - Hydrological library for Python","text":"<p>Hapi is an open-source Python Framework for building raster-based conceptual distributed hydrological models using HBV96 lumped model &amp; Muskingum routing method at a catchment scale (Farrag &amp; Corzo, 2021), Hapi gives a high degree of flexibility to all components of the model (spatial discretization - cell size, temporal resolution, parameterization approaches and calibration (Farrag et al., 2021)).</p> <p> </p> <p>Hapi</p>"},{"location":"python-packages/hydrological-modeling/hapi/#main-features","title":"Main Features","text":"<ul> <li>Modified version of HBV96 hydrological model (Bergstr\u00f6m, 1992) with 15 parameters in case of considering    snow processes, and 10 parameters without snow, in addition to 2 parameters of Muskingum routing method</li> <li>Remote sensing module to download the meteorological inputs required for the hydrologic model simulation (ECMWF)</li> <li>GIS modules to enable the modeler to fully prepare the meteorological inputs and do all the preprocessing     needed to build the model (align rasters with the DEM), in addition to various methods to manipulate and     convert different forms of distributed data (rasters, NetCDF, shapefiles)</li> <li>Sensitivity analysis module based on the concept of one-at-a-time OAT and analysis of the interaction among     model parameters using the Sobol concept ((Rusli et al., 2015)) and a visualization</li> <li>Statistical module containing interpolation methods for generating distributed data from gauge data, some     distribution for frequency analysis and Maximum likelihood method for distribution parameter estimation.</li> <li>Visualization module for animating the results of the distributed model, and the meteorological inputs</li> <li>Optimization module, for calibrating the model based on the Harmony search method</li> </ul> <p>The recent version of Hapi (Hapi 1.0.1) integrates the global hydrological parameters obtained by Beck et al., (2016), to reduce model complexity and uncertainty of parameters.</p>"},{"location":"python-packages/hydrological-modeling/hapi/#future-work","title":"Future work","text":"<ul> <li>Developing a regionalization method for connection model parameters with some catchment characteristics for better model calibration.</li> <li>Developing and integrate river routing method (kinematic and diffusive wave approximation)</li> <li>Apply the model for large scale (regional/continental) cases</li> <li>Developing a DEM processing module for generating the river network at different DEM spatial resolutions.</li> </ul> <p>For using Hapi please cite Farrag et al. (2021) and Farrag &amp; Corzo (2021)</p>"},{"location":"python-packages/hydrological-modeling/hapi/#ihe-delft-sessions","title":"IHE-Delft sessions","text":"<ul> <li>In April 14-15 we had a two days session for Masters and PhD student in IHE-Delft to explain the different modules and the distributed hydrological model in Hapi Day 1 ,  Day 2</li> </ul>"},{"location":"python-packages/hydrological-modeling/hapi/#references","title":"References","text":"<p>Farrag, M. &amp; Corzo, G. (2021) MAfarrag/Hapi: Hapi. doi:10.5281/ZENODO.4662170</p> <p>Farrag, M., Perez, G. C. &amp; Solomatine, D. (2021) Spatio-Temporal Hydrological Model Structure and Parametrization Analysis. J. Mar. Sci. Eng. 9(5), 467. doi:10.3390/jmse9050467 Link</p> <p>Beck, H. E., Dijk, A. I. J. M. van, Ad de Roo, Diego G. Miralles, T. R. M. &amp; Jaap Schellekens,  and L. A. B. (2016) Global-scale regionalization of hydrologic model parameters-Supporting materials 3599\u20133622. doi:10.1002/2015WR018247.Received</p> <p>Bergstr\u00f6m, S. (1992) The HBV model - its structure and applications. Smhi Rh 4(4), 35.</p> <p>Rusli, S. R., Yudianto, D. &amp; Liu, J. tao. (2015) Effects of temporal variability on HBV model calibration. Water Sci. Eng. 8(4), 291\u2013300. Elsevier Ltd. doi:10.1016/j.wse.2015.12.002</p>"},{"location":"python-packages/hydrological-modeling/hapi/#installing-hapi","title":"Installing hapi","text":"<p>Installing <code>hapi</code> from the <code>conda-forge</code> channel can be achieved by:</p> <pre><code>conda install -c conda-forge hapi\n</code></pre> <p>It is possible to list all of the versions of <code>hapi</code> available on your platform with:</p> <pre><code>conda search hapi --channel conda-forge\n</code></pre>"},{"location":"python-packages/hydrological-modeling/hapi/#install-from-github","title":"Install from Github","text":"<p>to install the last development to time you can install the library from github <pre><code>pip install git+https://github.com/MAfarrag/HAPI\n</code></pre></p>"},{"location":"python-packages/hydrological-modeling/hapi/#pip","title":"pip","text":"<p>to install the last release you can easly use pip <pre><code>pip install HAPI-Nile==1.6.0\n</code></pre></p>"},{"location":"python-packages/hydrological-modeling/hapi/#quick-start","title":"Quick start","text":"<pre><code>  &gt;&gt;&gt; import Hapi\n</code></pre> <p>other code samples</p>"},{"location":"python-packages/hydrological-modeling/serapis/","title":"Hydrodynamic model","text":""},{"location":"python-packages/hydrological-modeling/serapis/#current-build-status","title":"Current build status","text":"All platforms:"},{"location":"python-packages/hydrological-modeling/serapis/#current-release-info","title":"Current release info","text":"Name Downloads Version Platforms"},{"location":"python-packages/hydrological-modeling/serapis/#serapis-hydrodynamic-model-library-for-python","title":"serapis - hydrodynamic model library for Python","text":"<p>serapis is an open-source Python Framework for building hydrodynamic models using 1D Saint-Venant equations at a river scale.</p>"},{"location":"python-packages/hydrological-modeling/serapis/#installing-serapis","title":"Installing serapis","text":"<p>Installing <code>serapis</code> from the <code>conda-forge</code> channel can be achieved by:</p> <pre><code>conda install -c conda-forge serapis\n</code></pre> <p>It is possible to list all of the versions of <code>serapis</code> available on your platform with:</p> <pre><code>conda search serapis --channel conda-forge\n</code></pre>"},{"location":"python-packages/hydrological-modeling/serapis/#install-from-github","title":"Install from Github","text":"<p>to install the last development to time you can install the library from github <pre><code>pip install git+https://github.com/Serapieum-of-alex/serapis\n</code></pre></p>"},{"location":"python-packages/hydrological-modeling/serapis/#pip","title":"pip","text":"<p>to install the last release you can easly use pip <pre><code>pip install serapis==0.1.0\n</code></pre></p>"},{"location":"python-packages/hydrological-modeling/serapis/#quick-start","title":"Quick start","text":"<pre><code>  &gt;&gt;&gt; import serapis\n</code></pre> <p>other code samples</p>"},{"location":"python-packages/llm/llama-utils/","title":"llama-utils","text":"<p>LlamaIndex utility package</p> <p> </p> <p> </p> <p> </p>"},{"location":"python-packages/llm/llama-utils/#current-release-info","title":"Current release info","text":"Name Downloads Version Platforms"},{"location":"python-packages/llm/llama-utils/#llama-utils-large-language-model-utility-package","title":"llama-utils - Large Language Model Utility Package","text":"<p>llama-utils is a large language model utility package</p>"},{"location":"python-packages/llm/llama-utils/#main-features","title":"Main Features","text":"<ul> <li>llama-index</li> </ul>"},{"location":"python-packages/llm/llama-utils/#future-work","title":"Future work","text":"<ul> <li>Developing a DEM processing module for generating the river network at different DEM spatial resolutions.</li> </ul>"},{"location":"python-packages/llm/llama-utils/#installing-llama-utils","title":"Installing llama-utils","text":"<p>Installing <code>llama-utils</code> from the <code>conda-forge</code> channel can be achieved by:</p> <pre><code>conda install -c conda-forge llama-utils=0.1.0\n</code></pre> <p>It is possible to list all the versions of <code>llama-utils</code> available on your platform with:</p> <pre><code>conda search llama-utils --channel conda-forge\n</code></pre>"},{"location":"python-packages/llm/llama-utils/#install-from-github","title":"Install from GitHub","text":"<p>to install the last development to time, you can install the library from GitHub</p> <pre><code>pip install git+https://github.com/Serapieum-of-alex/llama-utils\n</code></pre>"},{"location":"python-packages/llm/llama-utils/#pip","title":"pip","text":"<p>to install the last release, you can easily use pip</p> <pre><code>pip install llama-utils==0.1.0\n</code></pre>"},{"location":"python-packages/llm/llama-utils/#quick-start","title":"Quick start","text":"<ul> <li>First download ollama from here ollama and install it.</li> <li>Then run the following command to pull the <code>llama3</code> model <pre><code>ollama pull llama3\n</code></pre></li> <li>Then run ollama server (if you get an error, check the errors section below to solve it) <pre><code>ollama serve\n</code></pre> Now you can use the <code>llama-utils</code> package to interact with the <code>ollama</code> server</li> </ul> <pre><code>from llama_utils.retrieval.storage import Storage\nSTORAGE_DIR= \"examples/data/llama3\"\nstorage = Storage.create()\ndata_path = \"examples/data/essay\"\ndocs = storage.read_documents(data_path)\nstorage.add_documents(docs)\nstorage.save(STORAGE_DIR)\n</code></pre>"},{"location":"python-packages/llm/llama-utils/#errors","title":"Errors","text":"<p>You might face the following error when you run the <code>ollama serve</code> command <pre><code>Error: listen tcp 127.0.0.1:11434: bind: Only one usage of each socket address (protocol/network address/port) is normally permitted.\n</code></pre> This error is due to the port <code>11434</code> is already in use, to solve this error, you can check which process is using this port by running the following command <pre><code>netstat -ano | findstr :11434\n</code></pre> You will get the following output <pre><code>    TCP    127.0.0.1:11434        0.0.0.0:0              LISTENING       20796\n</code></pre> Then you can kill the process by running the following command <pre><code>taskkill /F /PID 20796\n</code></pre> you will gee the following output <pre><code>SUCCESS: The process with PID 20796 has been terminated.\n</code></pre></p> <ul> <li>Then you can run the <code>ollama serve</code> command again, you should see the following output <pre><code>2024/11/22 23:20:04 routes.go:1189: INFO server config env=\"map[CUDA_VISIBLE_DEVICES: GPU_DEVICE_ORDINAL: HIP_VISIBLE_DEVICES: HSA_OVERRIDE_GFX_VERSION: HTTPS_PROXY: HTTP_PROXY: NO_PROXY: OLLAMA_DEBUG:false OLLAMA_FLASH_ATTENTION:false OLLAMA_GPU_OVERHEAD:0 OLLAMA_HOST:http://127.0.0.1:11434 OLLAMA_INTEL_GPU:false OLLAMA_KEEP_ALIVE:5m0s OLLAMA_LLM_LIBRARY: OLLAMA_LOAD_TIMEOUT:5m0s OLLAMA_MAX_LOADED_MODELS:0 OLLAMA_MAX_QUEUE:512 OLLAMA_MODELS:C:\\\\Users\\\\eng_m\\\\.ollama\\\\models OLLAMA_MULTIUSER_CACHE:false OLLAMA_NOHISTORY:false OLLAMA_NOPRUNE:false OLLAMA_NUM_PARALLEL:0 OLLAMA_ORIGINS:[http://localhost https://localhost http://localhost:* https://localhost:* http://127.0.0.1 https://127.0.0.1 http://127.0.0.1:* https://127.0.0.1:* http://0.0.0.0 https://0.0.0.0 http://0.0.0.0:* https://0.0.0.0:* app://* file://* tauri://* vscode-webview://*] OLLAMA_SCHED_SPREAD:false OLLAMA_TMPDIR: ROCR_VISIBLE_DEVICES:]\"\ntime=2024-11-22T23:20:04.393+01:00 level=INFO source=images.go:755 msg=\"total blobs: 28\"\ntime=2024-11-22T23:20:04.395+01:00 level=INFO source=images.go:762 msg=\"total unused blobs removed: 0\"\ntime=2024-11-22T23:20:04.397+01:00 level=INFO source=routes.go:1240 msg=\"Listening on 127.0.0.1:11434 (version 0.4.1)\"\ntime=2024-11-22T23:20:04.400+01:00 level=INFO source=common.go:49 msg=\"Dynamic LLM libraries\" runners=\"[cpu cpu_avx cpu_avx2 cuda_v11 cuda_v12 rocm]\"\ntime=2024-11-22T23:20:04.400+01:00 level=INFO source=gpu.go:221 msg=\"looking for compatible GPUs\"\ntime=2024-11-22T23:20:04.400+01:00 level=INFO source=gpu_windows.go:167 msg=packages count=1\ntime=2024-11-22T23:20:04.400+01:00 level=INFO source=gpu_windows.go:214 msg=\"\" package=0 cores=8 efficiency=0 threads=16\ntime=2024-11-22T23:20:04.592+01:00 level=INFO source=types.go:123 msg=\"inference compute\" id=GPU-04f76f9a-be0a-544b-9a6f-8607b8d0a9ab library=cuda variant=v12 compute=8.6 driver=12.6 name=\"NVIDIA GeForce RTX 3060 Ti\" total=\"8.0 GiB\" available=\"7.0 GiB\"\n</code></pre></li> </ul> <p>you can change the port by running the following command <code>ollama serve --port 11435</code></p>"},{"location":"python-packages/llm/serapeum/","title":"llm","text":""},{"location":"python-packages/llm/serapeum/#cuda-installation","title":"CUDA installation","text":"<ul> <li> <p>First check which version of CUDA toolkit is available for the version of pytorch you are going to use here https://pytorch.org/get-started/locally/</p> </li> <li> <p>We are using the stable version of pytorch (2.4.0) which is compatible in Windows with CUDA 12.4 <code>pip3 install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu124</code></p> </li> </ul> <p>https://docs.nvidia.com/cuda/cuda-quick-start-guide/index.html</p>"},{"location":"python-packages/statistics/geostatista/","title":"geostatista","text":""},{"location":"python-packages/statistics/geostatista/#current-release-info","title":"Current release info","text":"Name Downloads Version Platforms"},{"location":"python-packages/statistics/geostatista/#geostatista-statistics-package","title":"geostatista - Statistics package","text":"<p>geostatista is a statistics package</p> <p>geostatista</p>"},{"location":"python-packages/statistics/geostatista/#main-features","title":"Main Features","text":"<ul> <li>spatial interpolation (IDW/ISDW)</li> </ul>"},{"location":"python-packages/statistics/geostatista/#future-work","title":"Future work","text":"<ul> <li>Kriging</li> </ul>"},{"location":"python-packages/statistics/geostatista/#installing-geostatista","title":"Installing geostatista","text":"<p>Installing <code>geostatista</code> from the <code>conda-forge</code> channel can be achieved by:</p> <pre><code>conda install -c conda-forge geostatista\n</code></pre> <p>It is possible to list all of the versions of <code>geostatista</code> available on your platform with:</p> <pre><code>conda search geostatista --channel conda-forge\n</code></pre>"},{"location":"python-packages/statistics/geostatista/#install-from-github","title":"Install from Github","text":"<p>to install the last development to time you can install the library from github <pre><code>pip install git+https://github.com/MAfarrag/geostatista\n</code></pre></p>"},{"location":"python-packages/statistics/geostatista/#pip","title":"pip","text":"<p>to install the last release you can easly use pip <pre><code>pip install geostatista==0.1.6\n</code></pre></p>"},{"location":"python-packages/statistics/geostatista/#quick-start","title":"Quick start","text":"<pre><code>  &gt;&gt;&gt; import geostatista\n</code></pre> <p>other code samples</p>"},{"location":"python-packages/statistics/statista/","title":"Statista - Advanced Statistical Analysis Package","text":""},{"location":"python-packages/statistics/statista/#overview","title":"Overview","text":"<p>Statista is a comprehensive Python package for statistical analysis, focusing on probability distributions, extreme value analysis, and sensitivity analysis. It provides robust tools for researchers, engineers, and data scientists working with statistical models, particularly in hydrology, climate science, and risk assessment.</p>"},{"location":"python-packages/statistics/statista/#current-release-info","title":"Current release info","text":"<p>Repository: GitHub conda-forge feedstock:  Documentation: GitHub Pages</p> Name Downloads Version Platforms"},{"location":"python-packages/statistics/statista/#installation","title":"Installation","text":""},{"location":"python-packages/statistics/statista/#conda-recommended","title":"Conda (Recommended)","text":"<pre><code>conda install -c conda-forge statista\n</code></pre>"},{"location":"python-packages/statistics/statista/#pypi","title":"PyPI","text":"<pre><code>pip install statista\n</code></pre>"},{"location":"python-packages/statistics/statista/#development-version","title":"Development Version","text":"<pre><code>pip install git+https://github.com/Serapieum-of-alex/statista\n</code></pre>"},{"location":"python-packages/statistics/statista/#main-features","title":"Main Features","text":""},{"location":"python-packages/statistics/statista/#statistical-distributions","title":"Statistical Distributions","text":"<ul> <li>Probability Distributions: GEV, Gumbel, Normal, Exponential, and more</li> <li>Parameter Estimation Methods: Maximum Likelihood (ML), L-moments, Method of Moments (MOM)</li> <li>Goodness-of-fit Tests: Kolmogorov-Smirnov, Chi-square</li> <li>Truncated Distributions: Focus analysis on values above a threshold</li> </ul>"},{"location":"python-packages/statistics/statista/#extreme-value-analysis","title":"Extreme Value Analysis","text":"<ul> <li>Return Period Calculation: Estimate extreme events for different return periods</li> <li>Confidence Intervals: Calculate confidence bounds using various methods</li> <li>Plotting Positions: Weibull, Gringorten, and other empirical distribution functions</li> </ul>"},{"location":"python-packages/statistics/statista/#sensitivity-analysis","title":"Sensitivity Analysis","text":"<ul> <li>One-at-a-time (OAT): Analyze parameter sensitivity individually</li> <li>Sobol Visualization: Visualize parameter interactions and importance</li> </ul>"},{"location":"python-packages/statistics/statista/#statistical-tools","title":"Statistical Tools","text":"<ul> <li>Descriptive Statistics: Comprehensive statistical descriptors</li> <li>Time Series Analysis: Auto-correlation and other time series tools</li> <li>Visualization: Publication-quality plots for statistical analysis</li> </ul>"},{"location":"python-packages/statistics/statista/#quick-start","title":"Quick Start","text":""},{"location":"python-packages/statistics/statista/#basic-usage","title":"Basic Usage","text":"<pre><code>import pandas as pd\nfrom statista.distributions import Distributions\n\n# Load your time series data\ndata = pd.read_csv(\"your_data.csv\", header=None)[0].tolist()\n\n# Create a distribution object (e.g., Gumbel)\ndist = Distributions(\"Gumbel\", data)\n\n# Fit the distribution using maximum likelihood\nparams = dist.fit_model(method=\"mle\")\nprint(params)\n\n# Calculate and plot the PDF and CDF\npdf = dist.pdf(plot_figure=True)\ncdf, _, _ = dist.cdf(plot_figure=True)\n\n# Perform goodness-of-fit tests\nks_test = dist.ks()\nchi2_test = dist.chisquare()\n\n# Create a probability plot with confidence intervals\nfig, ax = dist.plot()\n</code></pre>"},{"location":"python-packages/statistics/statista/#extreme-value-analysis_1","title":"Extreme Value Analysis","text":"<pre><code>from statista.distributions import GEV, PlottingPosition\n\n# Create a GEV distribution\ngev_dist = Distributions(\"GEV\", data)\n\n# Fit using L-moments\nparams = gev_dist.fit_model(method=\"lmoments\")\n\n# Calculate non-exceedance probabilities\ncdf_weibul = PlottingPosition.weibul(data)\n\n# Calculate confidence intervals\nlower_bound, upper_bound, fig, ax = gev_dist.confidence_interval(plot_figure=True)\n</code></pre> <p>For more examples and detailed documentation, visit Statista Documentation</p>"},{"location":"python-packages/statistics/statista/#contributing","title":"Contributing","text":"<p>Contributions are welcome! Please feel free to submit a Pull Request.</p>"},{"location":"python-packages/statistics/statista/#license","title":"License","text":"<p>This project is licensed under the GPL-3.0 License - see the LICENSE file for details.</p>"},{"location":"python-packages/statistics/statista/#citation","title":"Citation","text":"<p>If you use Statista in your research, please cite it as:</p> <pre><code>Farrag, M. (2023). Statista: A Python package for statistical analysis, extreme value analysis, and sensitivity analysis. \nhttps://github.com/Serapieum-of-alex/statista\n</code></pre> <p>BibTeX: <pre><code>@software{statista2023,\n  author = {Farrag, Mostafa},\n  title = {Statista: A Python package for statistical analysis, extreme value analysis, and sensitivity analysis},\n  url = {https://github.com/Serapieum-of-alex/statista},\n  year = {2023}\n}\n</code></pre></p>"},{"location":"python-packages/utility-packages/hpc/","title":"HPC","text":"<p>Full documentation is available at serapieum-of-alex.github.io/hpc</p>"},{"location":"python-packages/utility-packages/hpc/#current-release-info","title":"Current release info","text":"<ul> <li>conda-forge feedstock: hpc</li> <li>github feedstock</li> </ul> Name Downloads Version Platforms"},{"location":"python-packages/utility-packages/hpc/#hpc-remote-sensing-package","title":"hpc - Remote Sensing package","text":"<p>hpc is a numpy utility package</p>"},{"location":"python-packages/utility-packages/hpc/#main-features","title":"Main Features","text":"<ul> <li>indixing numpy arrays in fast manner without using loops</li> </ul>"},{"location":"python-packages/utility-packages/hpc/#installing-hpc","title":"Installing hpc","text":"<p>Installing <code>hpc</code> from the <code>conda-forge</code> channel can be achieved by:</p> <pre><code>conda install -c conda-forge hpc\n</code></pre> <p>It is possible to list all of the versions of <code>hpc</code> available on your platform with:</p> <pre><code>conda search hpc --channel conda-forge\n</code></pre>"},{"location":"python-packages/utility-packages/hpc/#install-from-github","title":"Install from Github","text":"<p>to install the last development to time you can install the library from github <pre><code>pip install git+https://github.com/MAfarrag/hpc\n</code></pre></p>"},{"location":"python-packages/utility-packages/hpc/#pip","title":"pip","text":"<p>to install the last release you can easly use pip <pre><code>pip install hpc-utils==0.1.5\n</code></pre></p>"},{"location":"python-packages/utility-packages/hpc/#quick-start","title":"Quick start","text":"<pre><code>  &gt;&gt;&gt; import hpc\n</code></pre>"},{"location":"python-packages/utility-packages/oasis/","title":"optimization","text":""},{"location":"python-packages/utility-packages/oasis/#current-build-status","title":"Current build status","text":"All platforms:"},{"location":"python-packages/utility-packages/oasis/#oasis-optimization-algorithm-for-python","title":"Oasis - Optimization Algorithm for Python","text":""},{"location":"python-packages/utility-packages/oasis/#installation","title":"Installation","text":"<pre><code>Please install Oasis in a Virtual environment so that its requirements don't tamper with your system's python\n**Oasis** works with Python 2.7 and 3.7 64Bit on Windows\n</code></pre>"},{"location":"python-packages/utility-packages/oasis/#install-the-dependencies","title":"Install the dependencies","text":"<p>you can check libraries.io to check versions of the libraries <pre><code>conda install Numpy\npip install mpi4py\n</code></pre></p>"},{"location":"python-packages/utility-packages/oasis/#install-from-conda-forge","title":"Install from conda-forge","text":"<pre><code>conda install -c conda-forge oasis\n</code></pre>"},{"location":"python-packages/utility-packages/oasis/#install-from-github","title":"Install from Github","text":"<p>to install the last development to time you can install the library from github <pre><code>pip install git+https://github.com/MAfarrag/Oasis.git\n</code></pre></p>"},{"location":"python-packages/utility-packages/oasis/#compile","title":"Compile","text":"<p>You can compile the repository after you clone it iF python is already added to your system environment variable <pre><code>python setup.py install\n</code></pre></p>"},{"location":"python-packages/utility-packages/oasis/#or","title":"or","text":"<pre><code>pathto_your_env\\python setup.py install\n</code></pre>"},{"location":"python-packages/utility-packages/oasis/#pip","title":"pip","text":"<p>to install the latest release, you can use pip <pre><code>pip install Oasis-Optimization\n</code></pre></p>"},{"location":"python-packages/utility-packages/oasis/#yml-file","title":"YML file","text":"<p>using the environment.yml file included with the package you can create a new environment with all the dependencies installed with the latest Hapi version in the master branch <pre><code>conda env create --name Hapi_env -f environment.yml\n</code></pre></p>"},{"location":"python-packages/utility-packages/oasis/#documentation","title":"Documentation","text":"<p>for step by step Examples and documentation on how to use the algorithm readthedocs</p>"},{"location":"python-packages/utility-packages/serapeum-utils/","title":"serapeum-utils","text":""},{"location":"python-packages/utility-packages/serapeum-utils/#current-build-status","title":"Current build status","text":"All platforms:"},{"location":"python-packages/utility-packages/serapeum-utils/#current-release-info","title":"Current release info","text":"Name Downloads Version Platforms"},{"location":"python-packages/utility-packages/serapeum-utils/#serapeum_utils-utility-library-for-python","title":"serapeum_utils - utility library for Python","text":"<p>serapeum_utils is an open-source Python utility package</p> <p>serapeum_utils</p>"},{"location":"python-packages/utility-packages/serapeum-utils/#main-features","title":"Main Features","text":"<p>-</p>"},{"location":"python-packages/utility-packages/serapeum-utils/#installing-serapeum_utils","title":"Installing serapeum_utils","text":"<p>Installing <code>serapeum_utils</code> from the <code>conda-forge</code> channel can be achieved by:</p> <pre><code>conda install -c conda-forge serapeum_utils\n</code></pre> <p>It is possible to list all of the versions of <code>serapeum_utils</code> available on your platform with:</p> <pre><code>conda search serapeum_utils --channel conda-forge\n</code></pre>"},{"location":"python-packages/utility-packages/serapeum-utils/#install-from-github","title":"Install from Github","text":"<p>to install the last development to time you can install the library from github <pre><code>pip install git+https://github.com/Serapieum-of-alex/serapeum_utils\n</code></pre></p>"},{"location":"python-packages/utility-packages/serapeum-utils/#pip","title":"pip","text":"<p>to install the last release you can easly use pip <pre><code>pip install serapeum_utils==0.2.0\n</code></pre></p>"},{"location":"python-packages/utility-packages/serapeum-utils/#quick-start","title":"Quick start","text":"<pre><code>  &gt;&gt;&gt; import serapeum_utils\n</code></pre>"}]}